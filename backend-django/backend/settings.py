"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from dotenv import load_dotenv
from pathlib import Path
import os
from firebase_admin import credentials, initialize_app
from google.cloud import secretmanager
from loguru import logger
# 設定環境變數

GCP_PROJECT_ID = os.getenv('GCP_PROJECT_ID')
PUBSUB_TOPIC_NAME = os.getenv('PUBSUB_TOPIC_NAME')
BQ_DATASET_NAME = os.getenv('BQ_DATASET_NAME')
BQ_TABLE_NAME = os.getenv('BQ_TABLE_NAME')
logger.info(f"Current ENV value: {os.getenv('ENV')}")
# 加載 .env 文件
BASE_DIR = Path(__file__).resolve().parent.parent
# 確保 logs 目錄存在
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

# 配置 logger
logger.add(
    os.path.join(LOGS_DIR, "oak_backend.log"),
    rotation="500 MB",
    retention="10 days",
    level="INFO",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}"
)
logger.info("ENV:",os.getenv("ENV"))
load_dotenv(os.path.join(BASE_DIR, ".env"))
import os
if os.getenv("ENV") == "production":
    BASE_URL = "https://backend-django-964568919885.asia-east1.run.app"
    CORS_ALLOWED_ORIGINS = [
        "https://fulleroak1215-e4b09.web.app",  # Firebase Hosting 網址
        "https://backend-django-964568919885.asia-east1.run.app",  # Backend URL
    ]
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]
    CORS_ALLOW_HEADERS = [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
    ]
else:
    BASE_URL = "http://127.0.0.1:8000"
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_CREDENTIALS = True 

def access_secret_version(secret_id, version_id="latest"):
    """
    訪問 Google Secret Manager 並返回 Secret 值
    """
    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{PROJECT_ID}/secrets/{secret_id}/versions/{version_id}"
    
    try:
        response = client.access_secret_version(request={"name": name})
        secret_value = response.payload.data.decode("UTF-8")
        return secret_value
    except Exception as e:
        raise RuntimeError(f"Failed to access secret: {e}")

# 設定 Firebase Credentials Path
if os.getenv("ENV") == "production":
    try:
        # 讀取 Secret Manager 中的 Secret
        firebase_credentials_json = access_secret_version("firebase-credentials")
        print("Successfully retrieved credentials from Secret Manager")
        
        # 寫入臨時檔案
        os.makedirs("/tmp", exist_ok=True)
        FIREBASE_CREDENTIAL_PATH = "/tmp/firebase-sa.json"
        with open(FIREBASE_CREDENTIAL_PATH, "w") as f:
            f.write(firebase_credentials_json)
        print(f"Successfully wrote credentials to {FIREBASE_CREDENTIAL_PATH}")
        
        # 確認文件存在
        if os.path.exists(FIREBASE_CREDENTIAL_PATH):
            print(f"File exists at {FIREBASE_CREDENTIAL_PATH}")
        else:
            print(f"File does not exist at {FIREBASE_CREDENTIAL_PATH}")
    except Exception as e:
        print(f"Error in credential setup: {str(e)}")
else:
    load_dotenv()
    FIREBASE_CREDENTIAL_PATH = os.getenv("FIREBASE_CREDENTIAL_PATH")
# 初始化 Firebase Admin
if os.path.exists(FIREBASE_CREDENTIAL_PATH):
    cred = credentials.Certificate(FIREBASE_CREDENTIAL_PATH)
    initialize_app(cred)
    print("Firebase initialized successfully.")
else:
    raise FileNotFoundError(f"not found {FIREBASE_CREDENTIAL_PATH}")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--t!pjea3!)&#52+#=k(iqa_xh_9bln(3p-l#8arzbdko3u&13s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["127.0.0.1", "35.236.135.146", "localhost", 
                 "fulleroak1215-e4b09.web.app",
                 "backend-django-964568919885.asia-east1.run.app"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     "corsheaders",
    'app',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # 必須
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # "backend.middleware.FirebaseAuthenticationMiddleware",  
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
